// Copyright (c) The Vignette Authors
// Licensed under BSD 3-Clause License. See LICENSE for details.

using System;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

namespace Oxide.Input
{
    public class KeyEvent : DisposableObject
    {
        public readonly KeyEventType Type;
        public readonly KeyModifiers Modifiers;
        public readonly int VirtualKeyCode;
        public readonly int NativeKeyCode;
        public readonly char Text;
        public readonly char UnmodifiedText;
        public readonly bool IsKeypad;
        public readonly bool IsAutoRepeat;
        public readonly bool IsSystemKey;

        private KeyEvent(IntPtr handle)
            : base(handle)
        {
        }

        /// <summary>
        /// Creates a key event.
        /// </summary>
        /// <param name="type">
        /// The type of this key event.
        /// </param>
        /// <param name="modifiers">
        /// The current modifiers held down on the keyboard.
        /// </param>
        /// <param name="virtualKeyCode">
        /// The virtual key-code associated with this keyboard event. This is either
        /// directly from the event (ie, WPARAM on Windows) or via a mapping function.
        /// </param>
        /// <param name="nativeKeyCode">
        /// The actual key-code generated by the platform. The DOM spec primarily
        /// uses Windows-equivalent codes (hence virtualKeyCode above) but it helps to
        /// also specify the platform-specific key-code as well.
        /// </param>
        /// <param name="text">
        /// The actual character generated by this keyboard event.
        /// </param>
        /// <param name="unmodifiedText">
        /// The text generated by this keyboard event before all modifiers except
        /// shift are applied. This is used internally for working out shortcut keys.
        /// </param>
        /// <param name="isKeypad">
        /// Whether or not this is a keypad event.
        /// </param>
        /// <param name="isAutoRepeat">
        /// Whether or not this was generated as the result of an auto-repeat (eg, holding down a key).
        /// </param>
        /// <param name="isSystemKey">
        /// Whether or not the pressed key is a "system key". This is a Windows-only
        /// concept and should be "false" for all non-Windows platforms. For more
        /// information, see the following link:
        /// <br/>
        /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx
        /// </param>
        public KeyEvent(KeyEventType type, KeyModifiers modifiers, int virtualKeyCode, int nativeKeyCode, char text, char unmodifiedText, bool isKeypad, bool isAutoRepeat, bool isSystemKey)
            : base(Ultralight.ulCreateKeyEvent(type, modifiers, virtualKeyCode, nativeKeyCode, text.ToString(), unmodifiedText.ToString(), isKeypad, isAutoRepeat, isSystemKey))
        {
            Type = type;
            Modifiers = modifiers;
            VirtualKeyCode = virtualKeyCode;
            NativeKeyCode = nativeKeyCode;
            Text = text;
            IsKeypad = isKeypad;
            IsAutoRepeat = isAutoRepeat;
            IsSystemKey = isSystemKey;
        }

        /// <summary>
        /// Create a key event from a Windows key event.
        /// </summary>
        /// <exception cref="PlatformNotSupportedException"/>
        [SupportedOSPlatform("Windows")]
        public static KeyEvent CreateKeyEventFromWindowsEvent(KeyEventType type, UIntPtr wparam, UIntPtr lparam, bool isSystemKey)
        {
            if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                throw new PlatformNotSupportedException();

            return new KeyEvent(Ultralight.ulCreateKeyEventWindows(type, wparam, lparam, isSystemKey));
        }

        /// <summary>
        /// Create a key event from an NSEvent.
        /// </summary>
        /// <exception cref="PlatformNotSupportedException"/>
        [SupportedOSPlatform("OSX")]
        public static KeyEvent CreateKeyEventFromNSEvent(IntPtr evt)
        {
            if (!RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                throw new PlatformNotSupportedException();

            return new KeyEvent(Ultralight.ulCreateKeyEventMacOS(evt));
        }
    }
}
